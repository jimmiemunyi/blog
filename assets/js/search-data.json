{
  
    
        "post0": {
            "title": "Pneumonia X-Ray Classification.",
            "content": ". Introduction . Recently, I have been widely interested in the overlap between Deep Learning and Biology and decided to start learning about it. I came across an interesting challenge, where I try to build a Pneumonia Binary Classification Computer Vision model that predicts whether a chest X-ray has Pneumonia or not. I also learned a nifty approach to deal with a problem that is common in Medical Datasets, that I will show you here. . I am going to be using fastai and PyTorch for this tutorial. I want to extend my thanks to the author of this dataset from Kaggle that we are going to be using today. . Let&#39;s get the packages that we will need: . from fastai.vision.all import * import matplotlib.pyplot as plt import seaborn as sns . How does our data look like? . path = Path(&#39;data/chest_xray&#39;) . path.ls() . (#5) [Path(&#39;__MACOSX&#39;),Path(&#39;chest_xray&#39;),Path(&#39;val&#39;),Path(&#39;train&#39;),Path(&#39;test&#39;)] . It is already separated for us in the relevant folders. Awesome! Let&#39;s check inside one of the folders: . (path/&#39;train&#39;).ls() . (#2) [Path(&#39;train/PNEUMONIA&#39;),Path(&#39;train/NORMAL&#39;)] . The folders are also separated into their respective classes. How many images do we have per category? . train = get_image_files(path/&#39;train&#39;) val = get_image_files(path/&#39;val&#39;) test = get_image_files(path/&#39;test&#39;) print(f&quot;Train: {len(train)}, Valid: {len(val)}, Test: {len(test)}&quot;) . Train: 5216, Valid: 16, Test: 624 . Our validation set has only 16 images! That won&#39;t be a good measurement of how our model is performing but we will tackle that later on. . Let us check the distribution of images between the two classes: . normal = get_image_files(path/&#39;train&#39;/&#39;NORMAL&#39;) pneumonia = get_image_files(path/&#39;train&#39;/&#39;PNEUMONIA&#39;) print(f&quot;Normal Images: {len(normal)}. Pneumonia Images: {len(pneumonia)}&quot;) . Normal Images: 1341. Pneumonia Images: 3875 . data = [[&#39;Normal&#39;, len(normal)], [&#39;Pneumonia&#39;, len(pneumonia)]] df = pd.DataFrame(data, columns=[&#39;Class&#39;, &#39;Count&#39;]) sns.barplot(x=df[&#39;Class&#39;], y=df[&#39;Count&#39;]); . Remember the problem common to Medical Datasets I was talking about? We see that our dataset is imbalanced. Our negative class (Normal) is 3 times less than our positive class. This is a problem. How do we solve it? . First, we will utilize some Data Augmentations. This is artificially growing our dataset by introducing some transforms on the images. . Second, we will use some lessons that I read from a wonderful paper: Mateusz Buda, Atsuto Maki, and Maciej A Mazurowski. A systematic study of the class imbalance problem in convolutional neural networks that studies the problem of class imbalances and offers a way to solve it. I highly recommend reading the paper. . However, we need to build a Baseline model that we can later improve on. . For the Data Augmentations, we have to be careful to pick the ones that make sense for our X-Ray data. I picked Rotate and Zoom. If you think about it, transforms like flipping the image won&#39;t be useful since our body parts are in specific locations. e.g our liver is one the right, and flipping the X-Ray would take it to the opposite side. . I also utilize a nifty trick called Presizing from the fastai team. The basic idea behind this approach is this: We first resize the image to a bigger size, bigger than what we want for the final image. For instance, here, I resize the image to 460x460 first, then later on, resize it to 224x224 and at the same time, apply all the augmentaions at once. That is the most important point, applying the final resize and the transforms at the same time, preferably as a batch transform on the GPU. This helps in a higher quality image than insted, let&#39;s say, applying them one by one, which may degrade the data. To learn more about presizing, check out his notebook. . augs = [RandomResizedCropGPU(size=224, min_scale=0.75), Rotate(), Zoom()] . dblock = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, get_y=parent_label, splitter=GrandparentSplitter(train_name=&#39;train&#39;, valid_name=&#39;val&#39;), item_tfms=Resize(460), batch_tfms=augs ) . Let us collect the data in a dataloaders object and show one batch. . dls = dblock.dataloaders(path) . dls.show_batch() . We are going to utilize transfer learning on the resnet18 architecture. Our metrics to guide us are going to be error rate and accuracy. . learn = cnn_learner(dls, resnet18, metrics=[error_rate, accuracy]) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . We use another great tool by fastai that helps us get the optimal learning rate to use. Something around 1x10-2 will work okay according to the plot. (The bottom scale is Logarithmic) . learn.lr_find() . SuggestedLRs(lr_min=0.012022644281387329, lr_steep=0.0008317637839354575) . Let me explain, what happens in the next few cells. In Transfer Learning, we need to retain the knowledge learned by the pretrained model. So what happens is, we freeze all the earlier layers and chop off the last classification layer and replace it with a layer with random weights and the correct number outputs, two in this case(it is done by default in fastai when creating the learner through the cnn_learner method). . So, first we train the final layer (with random weights) for 3 epochs, with the one cycle training policy. Then we unfreeze the whole model, find the new suitable learning rate (because we are now updating all the weights) and train for a further 3 epochs. . learn.fit_one_cycle(3, lr_max=1e-2) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.168814 | 0.368405 | 0.187500 | 0.812500 | 03:13 | . 1 | 0.099094 | 0.734940 | 0.312500 | 0.687500 | 03:15 | . 2 | 0.063019 | 0.439835 | 0.187500 | 0.812500 | 03:17 | . learn.unfreeze() . learn.lr_find() . SuggestedLRs(lr_min=6.309573450380412e-08, lr_steep=2.2908675418875646e-06) . This plot looks different from the other one, since we are now updating all the weights, not just the final random ones, and the first layers don&#39;t need too much learning. 4x10-6 is the suggested learning rate. . Let&#39;s train the whole model with the new learning rate: . learn.fit_one_cycle(3, lr_max=4.4e-6) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.053950 | 0.435164 | 0.187500 | 0.812500 | 03:24 | . 1 | 0.053677 | 0.220901 | 0.062500 | 0.937500 | 03:23 | . 2 | 0.047155 | 0.361383 | 0.125000 | 0.875000 | 03:23 | . 87.5% accuracy. Not bad for a start, but we will try ways to improve it. . Let us see how our model is doing by inspecting the Confusion Matrix. . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Four &#39;NORMAL&#39; images are being classified as &#39;PNEUMONIA&#39;. Can this be caused because our model doesn&#39;t have enough examples of the &#39;NORMAL&#39; class to learn about? Let us investigate. . Solving the Imbalance Problem . The solution to the problem, as with many solutions to problems in Deep Learning, is simple and something that can be implemented easily. Quoting from their conclusions in the paper: . The method of addressing class imbalance that emerged as dominant in almost all analyzed scenarios was oversampling. | Oversampling should be applied to the level that completely eliminates the imbalance. | Oversampling does not cause over tting of convolutional neural networks. | . Basically, Oversampling is artificially making the minority class bigger by replicating it a couple of times. The paper recommends we replicate it until is completely eliminates the imbalance, therefore, our new oversampled &#39;NORMAL&#39; class is going to be the original images, repeated three times. And we don&#39;t have to worry about overfitting of our model too! . os_normal = get_image_files(path/&#39;train&#39;/&#39;NORMAL&#39;) * 3 pneumonia = get_image_files(path/&#39;train&#39;/&#39;PNEUMONIA&#39;) print(f&quot;Normal Images: {len(os_normal)}. Pneumonia Images: {len(pneumonia)}&quot;) . Normal Images: 4023. Pneumonia Images: 3875 . data = [[&#39;Normal&#39;, len(os_normal)], [&#39;Pneumonia&#39;, len(pneumonia)]] os_df = pd.DataFrame(data, columns=[&#39;Class&#39;, &#39;Count&#39;]) sns.barplot(x=os_df[&#39;Class&#39;], y=os_df[&#39;Count&#39;]); . After the Oversampling, the distribution between the classes is almost at per. Now our dataset it balanced and we can train a new model on this Balanced Data. . Now we need a new way to split our dataset when loading it to a DataLoader. Our new Oversampled Path is going to be the Oversampled &#39;NOMARL&#39; class, the original &#39;PNEUMONIA&#39; and the validation data. . Then we create two variables, train_idx and val_idx, that represent the indexes of the respective category of the images, whether train or validation. . os_path = os_normal + pneumonia + val train_idx = [i for i, fname in enumerate(os_path) if &#39;train&#39; in str(fname)] val_idx = [i for i, fname in enumerate(os_path) if &#39;val&#39; in str(fname)] . L(train_idx), L(val_idx) . ((#7898) [0,1,2,3,4,5,6,7,8,9...], (#16) [7898,7899,7900,7901,7902,7903,7904,7905,7906,7907...]) . Now we have 7898 images in the Train instead of the original 5216, and we still have 16 Validation images. We load them up in a dataloaders object, which our learner expects, find the new optimal learning rate and train the model: . dblock = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, get_y=parent_label, splitter=lambda x: [train_idx, val_idx], item_tfms=Resize(512), batch_tfms=augs ) . dls = dblock.dataloaders(path) learn = cnn_learner(dls, resnet18, metrics=[error_rate, accuracy]) learn.lr_find() . SuggestedLRs(lr_min=0.025118863582611083, lr_steep=0.0030199517495930195) . learn.fit_one_cycle(3, lr_max=2.5e-2) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.346110 | 0.308598 | 0.125000 | 0.875000 | 02:18 | . 1 | 0.196921 | 0.040522 | 0.000000 | 1.000000 | 02:17 | . 2 | 0.107927 | 0.038475 | 0.000000 | 1.000000 | 02:19 | . After just three epochs, we get 100% accuracy on the Validation Set. The Oversampling Solution worked well for us. . However, as I mentioned before, we only have 16 images on the Validation Set, so its not a good measure on how well our model generalizes. . So I combined the Validation and Test Set into one, and used that as my Validation Set to test how well my model generalizes. . merged_path = os_normal + pneumonia + val + test train_idx = [i for i, fname in enumerate(merged_path) if &#39;train&#39; in str(fname)] val_idx = [i for i, fname in enumerate(merged_path) if &#39;train&#39; not in str(fname)] . L(train_idx), L(val_idx) . ((#7898) [0,1,2,3,4,5,6,7,8,9...], (#640) [7898,7899,7900,7901,7902,7903,7904,7905,7906,7907...]) . We now have 640 images as our validation. How does our model perform with this new data? . learn.fit_one_cycle(5, lr_max=1e-4) . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.087615 | 0.043269 | 0.014062 | 0.985937 | 02:30 | . 1 | 0.079633 | 0.041382 | 0.015625 | 0.984375 | 02:30 | . 2 | 0.067601 | 0.054884 | 0.018750 | 0.981250 | 02:31 | . 3 | 0.053627 | 0.027576 | 0.006250 | 0.993750 | 02:30 | . 4 | 0.037838 | 0.025329 | 0.004688 | 0.995313 | 02:27 | . 99.5% accuracy after 5 epochs looks good, looks like our model generalizes well. . See you next time! .",
            "url": "https://jimmiemunyi.github.io/blog/begginer/2020/10/14/Pneumonia-Classification-with-Deep-Learning.html",
            "relUrl": "/begginer/2020/10/14/Pneumonia-Classification-with-Deep-Learning.html",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Training State of the Art Models with Little Data and Compute with Transfer Learning.",
            "content": "Introduction . Today, we are going to have a beginner&#39;s look into an interesting approach in Deep Learning, called Transfer Learning. We are also going to build a simple Computer Vision model to demonstrate a working example of Transfer Learning. Our model will be a classifier that differentiates between Millipedes, Centipedes and Spiders. . We are going to be using fastai and PyTorch for this tutorial. More specifically, we are going to be using Google&#39;s free service Colab that gives us free GPU to do Deep Learning. . What is Transfer Learning? . So what really is it Transfer Learning? . In simple terms, Transfer Learning is the approach of transferring knowledge from one Deep Learning Model to another. In more technical terms, Transfer Learning is the approach of using an already pretained model, and adapting it to a new problem. . This simple approach helps developers get state of the art results with little data and little compute. . Training a model from scratch requires a lot of compute and a lot of data. For example the pretrained model we are going to use was trained on ImageNet database which contains 1.2 million images with 1000 categories. In practice, very few people train the enitre Network from scratch, we often leverage the knowledge gained from these pretrained models and adapt them to our specific dataset. . To learn more about Transfer Learning, you can use these notes. . A Little Intuition Before We Begin. . Deep Learning models consists of many layers inside them, each learning its own unique features. In 2013, two researches published a paper called Visualizing and Understanding Convolutional Networks that helped visualize what is going on inside the layers and what they actually learn. In the interest of keeping this post beginner friendly, I won&#39;t go much into the technical details of the paper but, here are some images showing what the layers in the neural network learn. . In the first layer, the two reasearchers showed that the network learns general features like diagonal, vertical and horizontal edges. These are the building blocks. . . In the second layer, the Network starts to learn simple patterns that are also general to any Computer Vision Data like circles, etc. . And it keeps on improving layer by layer, building from the building blocks. . . So as you can see, the first layers of a Convolutional Network learn general patterns that are common to all images. This is why we don&#39;t want to discard these knowledge because it can be used for any dataset. . What actually happens in transfer learning, specifically for Computer Vision Tasks is the first layers are freezed (no learning goes on) and the final layer (the one that actually does the classification e.g dog from cat) is chopped of and replaced with a classification layer that is specific to the dataset, i.e our final layer will be trained to specifically distinguish Millipedes, Centipedes and Spiders. . Let&#39;s get straight into the practical example, shall we? . Training A Computer Vision Model Using Transfer Learning . Let&#39;s start by handling our imports: . from fastai.vision.all import * . For the DataSet, we are going to scrap the internet for centipedes, millipedes and spiders. We are going to use a very handy tool, jmd_imagescraper, that uses DuckDuckGo for the image scraping and returns some nice images. The developer also provides a nice ImageCleaner that we are going to use later to clean up the dataset. Let&#39;s import them too. . from jmd_imagescraper.core import * from jmd_imagescraper.imagecleaner import * . We create a directory called &#39;data&#39;. We then use the image scrapper to get the images of the three classes we are interested in and save them each to their specific directories inside the &#39;data&#39; directory, i.e. the centipedes will be stored inside a directory called &#39;Centipedes&#39; and the millipedes will be stored inside the &#39;Millipede&#39; directory and likewise for the spiders (This arrangement is going to prove useful later!). We download 150 images for each. . root = Path().cwd()/&quot;data&quot; duckduckgo_search(root, &#39;Centipede&#39;, &#39;centipede&#39;, max_results=150) duckduckgo_search(root, &#39;Millipede&#39;, &#39;millipede&#39;, max_results=150) duckduckgo_search(root, &#39;Spider&#39;, &#39;spider&#39;, max_results=150) . Let us see how our &#39;data&#39; directory looks after the downloading completes: . path = Path(&#39;data&#39;) . path.ls() . (#3) [Path(&#39;Spider&#39;),Path(&#39;Centipede&#39;),Path(&#39;Millipede&#39;)] . As you can see, we have three directories inside, each corresponding to the images it containes. If we look inside a specific directory, e.g. Centipede, we see the individual images downloaded, and the total number of images downloaded (150) prefixed before the list: . (path/&#39;Centipede&#39;).ls() . (#150) [Path(&#39;Centipede/135_dd009ed0.jpg&#39;),Path(&#39;Centipede/084_69e0099b.jpg&#39;),Path(&#39;Centipede/129_5409e84e.jpg&#39;),Path(&#39;Centipede/077_cc3b3dd9.jpg&#39;),Path(&#39;Centipede/097_cdfd1abf.jpg&#39;),Path(&#39;Centipede/030_55b8c176.jpg&#39;),Path(&#39;Centipede/090_ef7667e5.jpg&#39;),Path(&#39;Centipede/028_5b5b8f46.jpg&#39;),Path(&#39;Centipede/052_ec993151.jpg&#39;),Path(&#39;Centipede/056_86c51270.jpg&#39;)...] . Okay, now that we have got our images ready, we can begin the next step which is processing them. We use a handy function provided by fastai called get_image_files, which simply recursively goes through the directory and gets all the images inside them. . fns = get_image_files(path) fns . (#450) [Path(&#39;Spider/019_ffed6440.jpg&#39;),Path(&#39;Spider/100_59bd4277.jpg&#39;),Path(&#39;Spider/056_21ce5818.jpg&#39;),Path(&#39;Spider/114_33c06a31.jpg&#39;),Path(&#39;Spider/001_f7a867bc.jpg&#39;),Path(&#39;Spider/139_3d7b9ec9.jpg&#39;),Path(&#39;Spider/007_f8419240.jpg&#39;),Path(&#39;Spider/113_3082658a.jpg&#39;),Path(&#39;Spider/135_347f4e6e.jpg&#39;),Path(&#39;Spider/144_e94c648a.jpg&#39;)...] . We have 450 images, which makes sense. Did any image get corrupted during downloading? Let us verify the images. . failed = verify_images(fns) failed . (#0) [] . Luckily, no image got corrupted. Good, now let&#39;s go on. . Let us open one and see how it looks: . im = Image.open(fns[2]) im.to_thumb(128, 128) . So far everything is looking good! . Since we have gotten the images, now we can start processing them in a format that our learner expects. We are going to use the DataBlock API from fastai. . I am going to give a brief explanation of what is going on, but I highly recommend going through their documentaion about the DataBlock API, where they explain everything in detail. . Let us first see how the code looks like: . images = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, get_y=parent_label, splitter=RandomSplitter(valid_pct=0.2, seed=42), item_tfms=RandomResizedCrop(224, min_scale=0.3), batch_tfms=aug_transforms() ) . Let us go step by step: . blocks=(ImageBlock, CategoryBlock) . This simply tells the dataloader the format of the data it is receiving, i.e. here, our independent variable is going to be and Image, hence the ImageBlock, and the labels or the dependent variables are going to be a category (either &#39;Centipede&#39;, &#39;Millipede&#39;, or &#39;Spider&#39;) . get_items=get_image_files . This tells our dataloader how to get the items, using the get_image_files we used before . get_y=parent_label . This instructs our dataloader on how to get the labels of the images, by getting the parent name of the directory the image is in (That&#39;s why we arranged the pictures in images in their repsective directories). . splitter=RandomSplitter(valid_pct=0.2, seed=42) . This provides a way of splitting the dataset into a training and a validation set. Here we split the validation set into 20% of the total data. The seed option is there to ensure we get the same validation set every time. . item_tfms=RandomResizedCrop(224, min_scale=0.3) . This is simply a transformation done on every image individually. Here we resize the images to 224 x 224. Images should be the same size when fed into the Neural Network. We go an extra step of randomly picking a different crop of the images every time, i.e. a minimum of 30% of the total image every time. Randomly picking a different section of the image every time helps the Network generalize well to new data. . And finally this, . batch_tfms=aug_transforms() . performs data augmentation on the images. Data Augmentation deserves a whole post by itself to explain, but for intuition on why we do this, let me give a brief explanation. When using our model in the real world, people will provide images in very different formats, taken from different angles, some from cameras with low pixel capturing capabilities which provides somewhat blurry images. But we still need the model to generalize well to all of these cases! Hence data augmentation. Data Augmentation transforms the images to different versions, flipping it, rotating it, darkening it and many other transforms, to help the model generalize well in the real world. We use a batch transform here that applies the transforms in batches in the GPU which is way faster. . Let us load the images into a dataloader, which is what the learner expects, and show one batch of the images. . dls = images.dataloaders(path) . dls.show_batch(max_n=9) . As you can see, the images are being Randomly Resized, cropping every time to 30% of the image. . Let us see what the augmentation transforms did to our data, by adding the unique parameter: . dls.train.show_batch(max_n=8, nrows=2, unique=True) . As you can see, these all are the same images but transformed differently. . Now we are ready to create the model. . Training The Model . Remember all the talk of using a pretrained model? Well, here is where we apply it. . We are using the resnet18 pretrained model from PyTorch and fine tuning it for 5 epochs for our specific dataset. The &#39;18&#39; suffix simply means it has 18 layers, which is going to be sufficient for our simple model. However, there are deeper models like resnet34, resnet50, resnet101 and resnet152 with the respective number of layers. Deeper models take more time to train, and often produce better results but not always! As a rule of thumb, start simple then upgrade if need be. . We load our dataloaders (dls) created earlier and we are going to output &#39;error_rate&#39; and &#39;accuracy&#39; as our metrics, to guide us on how well our model is performing. . We are going to use a cnn_learner which is simply a Convolutional Neural Network Learner which is the type of Neural Network widely used for Computer Visions tasks. . learn = cnn_learner(dls, resnet18, metrics=[error_rate, accuracy]) learn.fine_tune(5) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate accuracy time . 0 | 1.545470 | 0.389558 | 0.155556 | 0.844444 | 00:03 | . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.454676 | 0.267906 | 0.100000 | 0.900000 | 00:03 | . 1 | 0.342936 | 0.232648 | 0.066667 | 0.933333 | 00:03 | . 2 | 0.291200 | 0.193626 | 0.077778 | 0.922222 | 00:03 | . 3 | 0.237957 | 0.190752 | 0.066667 | 0.933333 | 00:03 | . 4 | 0.205695 | 0.206321 | 0.066667 | 0.933333 | 00:03 | . After 5 epochs, we get an error rate of 6.7% which corresponds to an accuracy of 93.3%. That is really good considering our small dataset and the time we used to train this model, approximately 20 seconds, but as you will see, we can improve this. . You may be asking yourself why we didn&#39;t clean the dataset first before training. It is good to train your model as soon as possible to provide you with a baseline which you can start improving from. And we will clean the dataset later, with the help of the training results and then retrain with a clean dataaset and see if it improves. . Let us inspect what errors our initial model is making. The Classification Confusion Matrix can aid in displaying this in a good format. . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . The dark colors on that diagonal indicate that the model is perfoming well. But it is still making mistakes, for example it classified Centipedes as Millipedes 4 times and Spiders as Centipedes twice. . Let us see the specific images it is getting wrong and try to understand why it is confusing them by plotting the top losses of our model. . interp.plot_top_losses(5, nrows=5) . Straight away we can see that some of the mistakes it is making is because of unclean data. For example the 2nd and 4th images have nothing to do with our data. . This is why we need to clean the data. As you can see, training the model first helps us with the cleaning process. . We are going to use the ImageCleaner provides by the jmd_imagescrapper developer. . display_image_cleaner(root) . . I did deleted a few of the images from the datasets that didn&#39;t fit the criteria and we were left with 394 images (but useful ones!). . fns = get_image_files(path) fns . (#394) [Path(&#39;Spider/019_ffed6440.jpg&#39;),Path(&#39;Spider/100_59bd4277.jpg&#39;),Path(&#39;Spider/056_21ce5818.jpg&#39;),Path(&#39;Spider/114_33c06a31.jpg&#39;),Path(&#39;Spider/001_f7a867bc.jpg&#39;),Path(&#39;Spider/139_3d7b9ec9.jpg&#39;),Path(&#39;Spider/007_f8419240.jpg&#39;),Path(&#39;Spider/113_3082658a.jpg&#39;),Path(&#39;Spider/135_347f4e6e.jpg&#39;),Path(&#39;Spider/144_e94c648a.jpg&#39;)...] . Okay, now we create a new dataloader with the clean images. . dls = images.dataloaders(path) . Will training with only clean data help improve our model? Lets train a new model and see. We are going to use the exact details we used before, but I am fine-tuning for 10 epochs this time. . learn = cnn_learner(dls, resnet18, metrics=[error_rate, accuracy]) learn.fine_tune(10) . epoch train_loss valid_loss error_rate accuracy time . 0 | 2.070883 | 0.254761 | 0.076923 | 0.923077 | 00:02 | . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.478606 | 0.169040 | 0.038462 | 0.961538 | 00:02 | . 1 | 0.413722 | 0.118356 | 0.038462 | 0.961538 | 00:02 | . 2 | 0.333819 | 0.103353 | 0.038462 | 0.961538 | 00:02 | . 3 | 0.260725 | 0.119273 | 0.025641 | 0.974359 | 00:02 | . 4 | 0.213143 | 0.118922 | 0.025641 | 0.974359 | 00:02 | . 5 | 0.185268 | 0.092165 | 0.025641 | 0.974359 | 00:02 | . 6 | 0.156762 | 0.087852 | 0.012821 | 0.987179 | 00:02 | . 7 | 0.138017 | 0.083028 | 0.025641 | 0.974359 | 00:02 | . 8 | 0.118409 | 0.083742 | 0.025641 | 0.974359 | 00:02 | . 9 | 0.111713 | 0.082776 | 0.025641 | 0.974359 | 00:02 | . We went upto an error rate of just 2.6% which means that our model is correct 97.4% of the time! . As you have seen practically, Transfer Learning is a very important technique in Deep Learning that can go a long way. We only used 394 images here and trained for approximately for 20 seconds and got a model which is pretty accurate. . Stay tuned for more. .",
            "url": "https://jimmiemunyi.github.io/blog/begginer/2020/10/02/Transfer-Learning.html",
            "relUrl": "/begginer/2020/10/02/Transfer-Learning.html",
            "date": " • Oct 2, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Jimmie Munyi. . I am a developer, currently self teaching Machine Learning and Deep Learning. . This is my technical blog where I post stuff I’m working on and stuff I have learnt. . I am a student, graduation set for 2021. .",
          "url": "https://jimmiemunyi.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jimmiemunyi.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}