{
  
    
        "post0": {
            "title": "Tammy Abraham vs Callum Hudson Odoi Classifier",
            "content": "Introduction . Today, we are going to have a beginner&#39;s look into an interesting approach in Deep Learning, called Transfer Learning. We are also going to build a simple Computer Vision model to demonstrate a working example of Transfer Learning. Our model will be a classifier that differentiates between Millipedes, Centipedes and Spiders. . We are going to be using fastai and PyTorch for this tutorial. More specifically, we are going to be using Google&#39;s free service Colab that gives us free GPU to do Deep Learning. . What is Transfer Learning? . So what really is it Transfer Learning? . In simple terms, Transfer Learning is the approach of transferring knowledge from one Deep Learning Model to another. In more technical terms, Transfer Learning is the approach of using an already pretained model, and adapting it to a new problem. . This simple approach helps developers get state of the art results with little data and little compute. . Training a model from scratch requires a lot of compute and a lot of data. For example the pretrained model we are going to use was trained on ImageNet which contains 1.2 million images with 1000 categories. In practice, very few people train the enitre Network from scratch, we often leverage the knowledge gained from these pretrained models and adapt them to our specific dataset. . To learn more about Transfer Learning, you can use these notes. . A Little Intuition Before We Begin. . Deep Learning models consists of many layers inside them, each learning its own unique features. In 2013, two researches published a paper called Visualizing and Understanding Convolutional Networks that helped visualize what is going on inside the layers and what they actually learn. In the interest of keeping this post beginner friendly, I won&#39;t go much into the technical details of the paper but, here are some images showing what the layers in the neural network learn. . In the first layer, the two reasearchers showed that the network learns general features like diagonal, vertical and horizontal edges. These are the building blocks. . . In the second layer, the Network starts to learn simple patterns that are also general to any Computer Vision Data like circles, etc. . And it keeps on improving layer by layer, building from the building blocks. . . So as you can see, the first layers of a Convolutional Network learn general patterns that are common to all images. This is why we don&#39;t want to discard these knowledge because it can be used for any dataset. . What actually happens in transfer learning, specifically for Computer Vision Tasks is the first layers are freezed (no learning goes on) and the final layer (the one that actually does the classification e.g dog from cat) is chopped of and replaced with a classification layer that is specific to the dataset, i.e our final layer will be trained to specifically distinguish Millipedes, Centipedes and Spiders. . Let&#39;s get straight into the practical example, shall we? . Training A Computer Vision Model Using Transfer Learning . Let&#39;s start by handling our imports: . from fastai.vision.all import * . For the DataSet, we are going to scrap the internet for centipedes, millipedes and spiders. We are going to use a very handy tool, jmd_imagescraper, that uses DuckDuckGo for the image scraping and returns some nice images. The developer also provides a nice ImageCleaner that we are going to use later to clean up the dataset. Let&#39;s import them too. . from jmd_imagescraper.core import * from jmd_imagescraper.imagecleaner import * . We create a directory called &#39;data&#39;. We then use the image scrapper to get the images of the three classes we are interested in and save them each to their specific directories inside the &#39;data&#39; directory, i.e. the centipedes will be stored inside a directory called &#39;Centipedes&#39; and the millipedes will be stored inside the &#39;Millipede&#39; directory and likewise for the spiders (This arrangement is going to prove useful later!). We download 150 images for each. . root = Path().cwd()/&quot;data&quot; duckduckgo_search(root, &#39;Centipede&#39;, &#39;centipede&#39;, max_results=150) duckduckgo_search(root, &#39;Millipede&#39;, &#39;millipede&#39;, max_results=150) duckduckgo_search(root, &#39;Spider&#39;, &#39;spider&#39;, max_results=150) . Let us see how our &#39;data&#39; directory looks after the downloading completes: . path = Path(&#39;data&#39;) . path.ls() . (#3) [Path(&#39;Spider&#39;),Path(&#39;Centipede&#39;),Path(&#39;Millipede&#39;)] . As you can see, we have three directories inside, each corresponding to the images it containes. If we look inside a specific directory, e.g. Centipede, we see the individual images downloaded, and the total number of images downloaded (150) prefixed before the list: . (path/&#39;Centipede&#39;).ls() . (#150) [Path(&#39;Centipede/135_dd009ed0.jpg&#39;),Path(&#39;Centipede/084_69e0099b.jpg&#39;),Path(&#39;Centipede/129_5409e84e.jpg&#39;),Path(&#39;Centipede/077_cc3b3dd9.jpg&#39;),Path(&#39;Centipede/097_cdfd1abf.jpg&#39;),Path(&#39;Centipede/030_55b8c176.jpg&#39;),Path(&#39;Centipede/090_ef7667e5.jpg&#39;),Path(&#39;Centipede/028_5b5b8f46.jpg&#39;),Path(&#39;Centipede/052_ec993151.jpg&#39;),Path(&#39;Centipede/056_86c51270.jpg&#39;)...] . Okay, now that we have got our images ready, we can begin the next step which is processing them. We use a handy function provided by fastai called get_image_files, which simply recursively goes through the directory and gets all the images inside them. . fns = get_image_files(path) fns . (#450) [Path(&#39;Spider/019_ffed6440.jpg&#39;),Path(&#39;Spider/100_59bd4277.jpg&#39;),Path(&#39;Spider/056_21ce5818.jpg&#39;),Path(&#39;Spider/114_33c06a31.jpg&#39;),Path(&#39;Spider/001_f7a867bc.jpg&#39;),Path(&#39;Spider/139_3d7b9ec9.jpg&#39;),Path(&#39;Spider/007_f8419240.jpg&#39;),Path(&#39;Spider/113_3082658a.jpg&#39;),Path(&#39;Spider/135_347f4e6e.jpg&#39;),Path(&#39;Spider/144_e94c648a.jpg&#39;)...] . We have 450 images, which makes sense. Did any image get corrupted during downloading? Let us verify the images. . failed = verify_images(fns) failed . (#0) [] . Luckily, no image got corrupted. Good, now let&#39;s go on. . Let us open one and see how it looks: . im = Image.open(fns[2]) im.to_thumb(128, 128) . So far everything is looking good! . Since we have gotten the images, now we can start processing them in a format that our learner expects. We are going to use the DataBlock API from fastai. . I am going to give a brief explanation of what is going on, but I highly recommend going through their documentaion about the DataBlock API, where they explain everything in detail. . Let us first see how the code looks like: . images = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, get_y=parent_label, splitter=RandomSplitter(valid_pct=0.2, seed=42), item_tfms=RandomResizedCrop(224, min_scale=0.3), batch_tfms=aug_transforms() ) . Let us go step by step: . blocks=(ImageBlock, CategoryBlock) . This simply tells the dataloader the format of the data it is receiving, i.e. here, our independent variable is going to be and Image, hence the ImageBlock, and the labels or the dependent variables are going to be a category (either &#39;Centipede&#39;, &#39;Millipede&#39;, or &#39;Spider&#39;) . get_items=get_image_files . This tells our dataloader how to get the items, using the get_image_files we used before . get_y=parent_label . This instructs our dataloader on how to get the labels of the images, by getting the parent name of the directory the image is in (That&#39;s why we arranged the pictures in images in their repsective directories). . splitter=RandomSplitter(valid_pct=0.2, seed=42) . This provides a way of splitting the dataset into a training and a validation set. Here we split the validation set into 20% of the total data. The seed option is there to ensure we get the same validation set every time. . item_tfms=RandomResizedCrop(224, min_scale=0.3) . This is simply a transformation done on every image individually. Here we resize the images to 224 x 224. Images should be the same size when fed into the Neural Network. We go an extra step of randomly picking a different crop of the images every time, i.e. a minimum of 30% of the total image every time. Randomly picking a different section of the image every time helps the Network generalize well to new data. . And finally this, . batch_tfms=aug_transforms() . performs data augmentation on the images. Data Augmentation deserves a whole post by itself to explain, but for intuition on why we do this, let me give a brief explanation. When using our model in the real world, people will provide images in very different formats, taken from different angles, some from cameras with low pixel capturing capabilities which provides somewhat blurry images. But we still need the model to generalize well to all of these cases! Hence data augmentation. Data Augmentation transforms the images to different versions, flipping it, rotating it, darkening it and many other transforms, to help the model generalize well in the real world. We use a batch transform here that applies the transforms in batches in the GPU which is way faster. . Let us load the images into a dataloader, which is what the learner expects, and show one batch of the images. . dls = images.dataloaders(path) . dls.show_batch(max_n=9) . As you can see, the images are being Randomly Resized, cropping every time to 30% of the image. . Let us see what the augmentation transforms did to our data, by adding the unique parameter: . dls.train.show_batch(max_n=8, nrows=2, unique=True) . As you can see, these all are the same images but transformed differently. . Now we are ready to create the model. . Training The Model . Remember all the talk of using a pretrained model? Well, here is where we apply it. . We are using the resnet18 pretrained model from PyTorch and fine tuning it for 5 epochs for our specific dataset. The &#39;18&#39; suffix simply means it has 18 layers, which is going to be sufficient for our simple model. However, there are deeper models like resnet34, resnet50, resnet101 and resnet152 with the respective number of layers. Deeper models take more time to train, and often produce better results but not always! As a rule of thumb, start simple then upgrade if need be. . We load our dataloaders (dls) created earlier and we are going to output &#39;error_rate&#39; and &#39;accuracy&#39; as our metrics, to guide us on how well our model is performing. . We are going to use a cnn_learner which is simply a Convolutional Neural Network Learner which is the type of Neural Network widely used for Computer Visions tasks. . learn = cnn_learner(dls, resnet18, metrics=[error_rate, accuracy]) learn.fine_tune(5) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate accuracy time . 0 | 1.545470 | 0.389558 | 0.155556 | 0.844444 | 00:03 | . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.454676 | 0.267906 | 0.100000 | 0.900000 | 00:03 | . 1 | 0.342936 | 0.232648 | 0.066667 | 0.933333 | 00:03 | . 2 | 0.291200 | 0.193626 | 0.077778 | 0.922222 | 00:03 | . 3 | 0.237957 | 0.190752 | 0.066667 | 0.933333 | 00:03 | . 4 | 0.205695 | 0.206321 | 0.066667 | 0.933333 | 00:03 | . After 5 epochs, we get an error rate of 6.7% which corresponds to an accuracy of 93.3%. That is really good considering our small dataset and the time we used to train this model, approximately 20 seconds, but as you will see, we can improve this. . You may be asking yourself why we didn&#39;t clean the dataset first before training. It is good to train your model as soon as possible to provide you with a baseline which you can start improving from. And we will clean the dataset later, with the help of the training results and then retrain with a clean dataaset and see if it improves. . Let us inspect what errors our initial model is making. The Classification Confusion Matrix can aid in displaying this in a good format. . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . The dark colors on that diagonal indicate that the model is perfoming well. But it is still making mistakes, for example it classified Centipedes as Millipedes 4 times and Spiders as Centipedes twice. . Let us see the specific images it is getting wrong and try to understand why it is confusing them by plotting the top losses of our model. . interp.plot_top_losses(5, nrows=5) . Straight away we can see that some of the mistakes it is making is because of unclean data. For example the 2nd and 4th images have nothing to do with our data. . This is why we need to clean the data. As you can see, training the model first helps us with the cleaning process. . We are going to use the ImageCleaner provides by the jmd_imagescrapper developer. . display_image_cleaner(root) . . I did deleted a few of the images from the datasets that didn&#39;t fit the criteria and we were left with 394 images (but useful ones!). . fns = get_image_files(path) fns . (#394) [Path(&#39;Spider/019_ffed6440.jpg&#39;),Path(&#39;Spider/100_59bd4277.jpg&#39;),Path(&#39;Spider/056_21ce5818.jpg&#39;),Path(&#39;Spider/114_33c06a31.jpg&#39;),Path(&#39;Spider/001_f7a867bc.jpg&#39;),Path(&#39;Spider/139_3d7b9ec9.jpg&#39;),Path(&#39;Spider/007_f8419240.jpg&#39;),Path(&#39;Spider/113_3082658a.jpg&#39;),Path(&#39;Spider/135_347f4e6e.jpg&#39;),Path(&#39;Spider/144_e94c648a.jpg&#39;)...] . Okay, now we create a new dataloader with the clean images. . dls = images.dataloaders(path) . Will training with only clean data help improve our model? Lets train a new model and see. We are going to use the exact details we used before, but I am fine-tuning for 10 epochs this time. . learn = cnn_learner(dls, resnet18, metrics=[error_rate, accuracy]) learn.fine_tune(10) . epoch train_loss valid_loss error_rate accuracy time . 0 | 2.070883 | 0.254761 | 0.076923 | 0.923077 | 00:02 | . epoch train_loss valid_loss error_rate accuracy time . 0 | 0.478606 | 0.169040 | 0.038462 | 0.961538 | 00:02 | . 1 | 0.413722 | 0.118356 | 0.038462 | 0.961538 | 00:02 | . 2 | 0.333819 | 0.103353 | 0.038462 | 0.961538 | 00:02 | . 3 | 0.260725 | 0.119273 | 0.025641 | 0.974359 | 00:02 | . 4 | 0.213143 | 0.118922 | 0.025641 | 0.974359 | 00:02 | . 5 | 0.185268 | 0.092165 | 0.025641 | 0.974359 | 00:02 | . 6 | 0.156762 | 0.087852 | 0.012821 | 0.987179 | 00:02 | . 7 | 0.138017 | 0.083028 | 0.025641 | 0.974359 | 00:02 | . 8 | 0.118409 | 0.083742 | 0.025641 | 0.974359 | 00:02 | . 9 | 0.111713 | 0.082776 | 0.025641 | 0.974359 | 00:02 | . We went upto an error rate of just 2.6% which means that our model is correct 97.4 % percent of the time! . As you have seen practically, Transfer Learning is a very important technique in Deep Learning that can go a long way. We only used 394 images here and trained for approximately for 20 seconds and got a model which is pretty accurate. .",
            "url": "https://jimmiemunyi.github.io/blog/begginer/2020/10/02/Transfer-Learning.html",
            "relUrl": "/begginer/2020/10/02/Transfer-Learning.html",
            "date": " • Oct 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Tammy Abraham vs Callum Hudson Odoi Classifier",
            "content": "Introduction . Today, I am going to try and build a model that can differentiate between two players from my favourite football team: Tammy Abraham and Odoi. . Straight out of the box, I realize that this is going to be a difficult task for a computer since the players play for the same team (so they will have the same jersey color most of the time), they have the same hair dye color and they pretty much look alike. . Nonetheless, let&#39;s see how a computer manages this task. . Setting Up . Let&#39;s make the necessary imports . from fastai.vision.widgets import * from fastbook import * . For the data, we will be scraping the internet for images of the two players. I will use the Bing Search API because I find it easy to use. . We will use the doc function from fast.ai to check what we need for the function that it provides for Bing: . doc(search_images_bing) . search_images_bing[source] . search_images_bing(key, term, min_sz=128) . So as you see, we need an api key (which you can get from Bing) and the search term. . Lets see if the functions works . results = search_images_bing(key, &#39;Tammy Abraham&#39;) ims = results.attrgot(&#39;content_url&#39;) len(ims) . 150 . As you can see, our search returned 150 images. Let&#39;s peek at one of the pictures: . dest = &#39;images/tammy.jpg&#39; download_url(ims[1], dest) . im = Image.open(dest) im.to_thumb(128, 128) . Now since we see that the function is working as expected, let us write the code that will help getting images for the two players. . players = &#39;Tammy Abraham&#39;, &#39;Callum Hudson Odoi&#39; path = Path(&#39;players&#39;) . if not path.exists(): path.mkdir() for o in players: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o}&#39;) download_images(dest, urls=results.attrgot(&#39;content_url&#39;)) . As you can see, we got 297 images in total. The above code organizes the images in folders, with the folder name being the name of the player. . fns = get_image_files(path) fns . (#297) [Path(&#39;players/Tammy Abraham/00000119.jpg&#39;),Path(&#39;players/Tammy Abraham/00000068.jpeg&#39;),Path(&#39;players/Tammy Abraham/00000026.jpg&#39;),Path(&#39;players/Tammy Abraham/00000141.jpg&#39;),Path(&#39;players/Tammy Abraham/00000023.jpg&#39;),Path(&#39;players/Tammy Abraham/00000061.jpg&#39;),Path(&#39;players/Tammy Abraham/00000051.jpg&#39;),Path(&#39;players/Tammy Abraham/00000055.jpg&#39;),Path(&#39;players/Tammy Abraham/00000008.jpg&#39;),Path(&#39;players/Tammy Abraham/00000082.jpg&#39;)...] . Sometimes, images get corrupted along the way, so we inspect our results to see if this happened. . failed = verify_images(fns) failed . (#18) [Path(&#39;players/Tammy Abraham/00000025.jpg&#39;),Path(&#39;players/Tammy Abraham/00000043.jpg&#39;),Path(&#39;players/Tammy Abraham/00000129.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000051.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000032.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000038.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000050.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000054.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000146.jpg&#39;),Path(&#39;players/Callum Hudson Odoi/00000016.jpg&#39;)...] . Unfortunately, 18 images were corrupted so let us delete them from our dataset. . failed.map(Path.unlink); . The next process after getting your data is usually creating a DataBlock which is a BluePrint for a DataLoader that we will feed into our model. . We use a validation set of 20% of the total data. For the transformers, we use a RandomResizeCrop and some data augmentation. . players_blk = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(128, min_scale=0.3), batch_tfms=aug_transforms() ) . Now we can create the DataLoader and display some images to see what we are working with. . dls = players_blk.dataloaders(path) . dls.valid.show_batch(max_n=10, nrows=2) . That seems okay, so let us proceed to creating the model and training it. . Creating the Model . I went with a Convolutional Neural Network (good for computer vision stuff) and the resnet34 architecture. I&#39;ll output the error_rate. . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-333f7ec4.pth . . epoch train_loss valid_loss error_rate time . 0 | 1.189435 | 2.859934 | 0.527273 | 00:07 | . epoch train_loss valid_loss error_rate time . 0 | 0.870446 | 1.862521 | 0.490909 | 00:07 | . 1 | 0.734076 | 1.400823 | 0.345455 | 00:07 | . 2 | 0.640269 | 0.927152 | 0.272727 | 00:07 | . 3 | 0.601557 | 0.663442 | 0.236364 | 00:07 | . Our model does&#39;t perform well out of the box, its wrong 23.6% of the time, so that&#39;s an accuracy of 76.4% . But remember, these two look very much alike and for an inexperienced observer, he/she might confuse them too. . Let&#39;s look at the confusion matrix to see what our model is getting wrong: . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Wow, so most errors come from classifying Tammy Abraham as Callum Hudson Odoi (12 times). It only confused Odoi for Tammy one time. . Let us inspect the top losses: . interp.plot_top_losses(5, nrows=5) . Can we Improve the Model? . I haven&#39;t learned much at this point on improving models but I am going to give it a shot. fast.ai provides us with a nice GUI for data cleaning and that is what I&#39;ll use. . cleaner = ImageClassifierCleaner(learn) cleaner . . So many of these images are confusing even to the Human eye. I deleted some pictures that may be confusing. . for idx in cleaner.delete(): cleaner.fns[idx].unlink() . Now to retrain our model after the data cleaning, I used a more powerful architecture, the resnet50 and used 10 epochs this time. . # retraining the model players_blk = players_blk.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms() ) dls = players_blk.dataloaders(path) learn = cnn_learner(dls, resnet50, metrics=error_rate) learn.fine_tune(10) . Downloading: &#34;https://download.pytorch.org/models/resnet50-19c8e357.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth . . epoch train_loss valid_loss error_rate time . 0 | 1.135414 | 3.326896 | 0.490909 | 00:09 | . epoch train_loss valid_loss error_rate time . 0 | 0.576513 | 0.481626 | 0.272727 | 00:10 | . 1 | 0.441237 | 0.723249 | 0.254545 | 00:10 | . 2 | 0.345033 | 0.537463 | 0.181818 | 00:10 | . 3 | 0.274907 | 0.590239 | 0.181818 | 00:09 | . 4 | 0.258264 | 0.665819 | 0.163636 | 00:09 | . 5 | 0.224453 | 0.746396 | 0.163636 | 00:10 | . 6 | 0.188072 | 0.759091 | 0.163636 | 00:09 | . 7 | 0.174902 | 0.722550 | 0.127273 | 00:10 | . 8 | 0.158223 | 0.722072 | 0.127273 | 00:09 | . 9 | 0.142112 | 0.730478 | 0.145455 | 00:10 | . We got better accuracy this time, specifically 85.9% accuracy. Not bad, Let&#39;s see how our model performs with new data. . Predictions . I uploaded some images and this is how it performed: . # creating upload and classify widgets btn_upload = widgets.FileUpload() btn_run = widgets.Button(description=&#39;Classify&#39;) lbl_pred = widgets.Label() out_pl = widgets.Output() # creating the on click listener def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128, 128)) pred, pred_idx, probs = learn.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . # creating a VBox VBox([widgets.Label(&#39;Upload Your Player&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . . It got 5/6 predictions correct, and the wrong one is an image of Tammy from way before, before he dyed his hair. However judging from the probabilities of the predictions, I suspect some of these images I am predicting might have been in the training set. . To solve this, I read that I should use a seperate test set. Still Learning! I&#39;ll make sure I use one on my next model. . Tune in for more pet projects! .",
            "url": "https://jimmiemunyi.github.io/blog/begginer/2020/08/25/Tammy-Abraham-vs-Callum-Hudson-Odoi-Classifier.html",
            "relUrl": "/begginer/2020/08/25/Tammy-Abraham-vs-Callum-Hudson-Odoi-Classifier.html",
            "date": " • Aug 25, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "A Simple Snake Classifier",
            "content": "Introduction . In line with my study of the fast.ai course, I decided to build pet projects along the way. Today, I will be building a Classifier that can classify snakes from 5 different species, namely: . Nerodia Sipedon - Northern Watersnake | Thamnophis Sirtalis - Common Garter snake | Storeria Dekayi - DeKay&#39;s Brown snake | Patherophis Obsoletus - Black Rat snake | Crotalus Atrox - Western Diamondback rattlesnake | . While this is just a basic task, I intend to expand this pet project further in future to differentiate between venomous snakes and non-venomous snakes, in addition to their species. . . Getting the Data . The data I use today can be found on Kaggle. . Note: You will need an account and api key to download it. . I do a little preprocessing too, ie, change the parent folders of the snakes to their species. (This will be important later.) . from google.colab import files files.upload() . !mkdir -p ~/.kaggle !cp kaggle.json ~/.kaggle/ !chmod 600 ~/.kaggle/kaggle.json !kaggle datasets download -d sameeharahman/preprocessed-snake-images !unzip *zip &amp;&amp; rm *zip . %cd preprocessed-cleaned-set/train/ %mv class-1 &#39;Nerodia sipedon&#39; %mv class-2 &#39;Thamnophis sirtalis&#39; %mv class-3 &#39;Storeria dekayi&#39; %mv class-4 &#39;Patherophis obsoletus&#39; %mv class-5 &#39;Crotalus atrox&#39; . Required Installations and Imports . !pip install -Uqq fastbook import fastbook fastbook.setup_book() . from fastbook import * from fastai.vision.widgets import * . Converting the Data to DataLoaders . Let&#39;s check out one of the images. . dest = &#39;Crotalus atrox/00211adf56c52e867246185a40859aa2.jpg&#39; im = Image.open(dest) im.to_thumb(128, 128) . Straight out of the box, we see that some of the images might be padded. This a problem. It results in a lot of empty space which is just wasted computation for our model and can result in lower effective resolution for the part of the image we actually use. . The Dataset from Kaggle has been preprocessed by the author. An alternative approach would be to get the original dateset and do the preprocessing myself. However, I will proceed with the current images. . Let&#39;s create the DataBlock, which will be the building block of the DataLoaders. The parameters are as follows: . we provide two blocks, ImageBlock for the independent variable(the images) and CategoryBlock for the dependent variable, y (the label of the images). | we provide a way of getting the Validation Set by using the RandomSplitter parameter and 20% of the data. | we provide a way of getting the labels of each class using the parent_label (that&#39;s why we renamed the folders before to match the species) | we provide some tranformers to be applied to the images which are RandomResizeCrop and data augmentation transformer | . path = Path(&#39;.&#39;) # set path variable to current working directory . snakes = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms() ) . Now we can create the DataLoader. . # creating the dataloaders dls = snakes.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . . CNN Learner . Next, we are going to use a Convolutional Neural Network and use tranfer learning on the resnet34 architecture to create our model. We use 4 epochs. . For the metric, we output the error rate. . # creating the CNN learner learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 0.932205 | 0.610560 | 0.222606 | 01:47 | . epoch train_loss valid_loss error_rate time . 0 | 0.542848 | 0.446825 | 0.163647 | 02:03 | . 1 | 0.385937 | 0.326108 | 0.115617 | 02:04 | . 2 | 0.281081 | 0.292349 | 0.109865 | 02:04 | . 3 | 0.182197 | 0.262394 | 0.092321 | 02:04 | . Out of the box, with fastai library, we get an error rate of 9.23% which equates to 90.77% accuracy!! That is impressive. . Let&#39;s check out the confusion matrix to see how our classifier performed. . interp=ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . We can see that most errors come from our model predicting the Nerodia Sipedon as Patherophis Obsoletus. But the others seem okay. We could improve this by Data Cleaning and preprocessing of the dataset. . Let us check the top losses of our model. . interp.plot_top_losses(5, nrows=5) # i have used 5 rows for visibility purposes . . Predictions . Now let us see how our model does with new data. I will create a widget for uploading an image and classifying the uploaded image. . # creating upload and classify widgets btn_upload = widgets.FileUpload() btn_run = widgets.Button(description=&#39;Classify&#39;) lbl_pred = widgets.Label() out_pl = widgets.Output() # creating the on click listener def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128, 128)) pred, pred_idx, probs = learn.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . I tested each class with an upload and the model got all of them right. I will continue trying to test the model with other images and trying to improve the model. . # creating a VBox VBox([widgets.Label(&#39;Select your snake!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . . Where From Here . This model only recognizes 5 species of snakes. However, snakes are extremely diverse. Currently, snakes are classified into 24 families, containing 528 genera and 3,709 species. . To add to that, some snakes look alike but are from diffrent species and some are venomous while their look alikes are harmless! . As I said in the beggining, my goal would be to build a model that classifies a new image provided as venomous or harmless. . I am terrified of snakes and recognizing which are venomous would go along way!! . I will continue working towards my goal. . Follow my blog to see more of my journey. I plan on documenting most (if not all) of it. .",
            "url": "https://jimmiemunyi.github.io/blog/begginer/2020/08/24/A-Simple-Snake-Classifier.html",
            "relUrl": "/begginer/2020/08/24/A-Simple-Snake-Classifier.html",
            "date": " • Aug 24, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My Name is Jimmie Munyi. I am hobbyist developer with interested in Machine Learning and Deep Learning. . This is my technical blog where I post everything I encounter in my journey from beginner posts to passion projects. . I am a student, graduation set for 2021. .",
          "url": "https://jimmiemunyi.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jimmiemunyi.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}